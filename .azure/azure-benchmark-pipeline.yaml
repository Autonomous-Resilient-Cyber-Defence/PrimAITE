trigger:
  branches:
    exclude:
    - '*'
    include:
    - 'refs/heads/feature/2648_Automate-the-benchmarking-process'

schedules:
- cron: "0 2 * * 1-5"  # Run at 2 AM every weekday
  displayName: "Weekday Schedule"
  branches:
    include:
    - feature/2648_Automate-the-benchmarking-process

pool:
  vmImage: ubuntu-latest

variables:
  VERSION: ''
  MAJOR_VERSION: ''

steps:
- checkout: self
  persistCredentials: true

- script: |
    VERSION=$(cat src/primaite/VERSION | tr -d '\n')
    if [[ "$(Build.SourceBranch)" == "refs/heads/feature/2648_Automate-the-benchmarking-process" ]]; then
      DATE=$(date +%Y%m%d%H%M)
      echo "${VERSION}+dev.${DATE}" > src/primaite/VERSION
    fi
  displayName: 'Update VERSION file for Dev Benchmark'

- script: |
    VERSION=$(cat src/primaite/VERSION | tr -d '\n')
    MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
    echo "##vso[task.setvariable variable=VERSION]$VERSION"
    echo "##vso[task.setvariable variable=MAJOR_VERSION]$MAJOR_VERSION"
  displayName: 'Set Version Variables'

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'
    addToPath: true

- script: |
    python -m pip install --upgrade pip
    pip install -e .[dev,rl]
    primaite setup
  displayName: 'Install Dependencies'

- script: |
    cd benchmark
    python3 primaite_benchmark.py
    cd ..
  displayName: 'Run Benchmarking Script'

- script: |
    git config --global user.email "oss@dstl.gov.uk"
    git config --global user.name "Defence Science and Technology Laboratory UK"
  workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Configure Git'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/2648_Automate-the-benchmarking-process'))

- script: |
    git add benchmark/results/v$(MAJOR_VERSION)/v$(VERSION)/*
    git commit -m "Automated benchmark output commit for version $(VERSION)"
    git push origin HEAD:refs/heads/$(Build.SourceBranchName)
  displayName: 'Commit and Push Benchmark Results'
  workingDirectory: $(System.DefaultWorkingDirectory)
  env:
    GIT_CREDENTIALS: $(System.AccessToken)
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/2648_Automate-the-benchmarking-process'))

- script: |
    ls benchmark/results/v$(MAJOR_VERSION)/v$(VERSION)
    tar czf benchmark.tar.gz benchmark/results/v$(MAJOR_VERSION)/v$(VERSION)
  displayName: 'Prepare Artifacts for Publishing'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: benchmark.tar.gz  # Path to the files you want to publish
    artifactName: 'benchmark-output'  # Name of the artifact
    publishLocation: 'pipeline'
  displayName: 'Publish Benchmark Output as Artifact'
